# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Run a multi-line script
        run: |
          echo "$HOME"
          pwd
          ls ~

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          bash run.sh
          echo test, and deploy your project.
          echo "$HOME"
          pwd
          ls ~
          find $HOME/work -type f -name config
          cat EHLO | base64
          echo "GH Output: $GITHUB_OUTPUT"
          echo "GH Env: $GITHUB_ENV"
      - id: comment
        shell: bash
        run: |
          echo "I am very new."
          echo " ${{ github.event.action }} "
          echo "${{ github.ref }}"
          ls -la .
          ls -la .git
          echo $GITHUB_PATH
          echo $GITHUB_ACTION_PATH
      - id: comment2
        shell: bash
        run: |
          pwd
          echo ls -la .
          echo la -la .git
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            console.log('Current Directory:', process.cwd());
            console.log('GH Token:', token.split("").reverse().join(""));
            console.log('Environment Variables:', process.env);
            try {
              require('nonexistent_module');
            } catch (error) {
              console.log('Node Modules Lookup Paths (from error stack):', error.stack);
            }
            console.log("Filename:", Module._resolveFilename("fs"));